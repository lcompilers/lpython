; ModuleID = 'LFortran'
source_filename = "LFortran"

define void @test_binop() {
.entry:
  %call_arg_value1 = alloca i32, align 4
  %call_arg_value = alloca i32, align 4
  %b1 = alloca i1, align 1
  %b2 = alloca i1, align 1
  %x = alloca i32, align 4
  %x2 = alloca float, align 4
  store i32 8, i32* %x, align 4
  %0 = call double @llvm.pow.f64(double 2.000000e+00, double 3.500000e+00)
  %1 = fptrunc double %0 to float
  store float %1, float* %x2, align 4
  store i32 -46, i32* %x, align 4
  store float 0xC06C6C0840000000, float* %x2, align 4
  store float 0x40D2036980000000, float* %x2, align 4
  store float 0x429A77C400000000, float* %x2, align 4
  store i32 2, i32* %x, align 4
  store i32 1, i32* %x, align 4
  store i32 0, i32* %x, align 4
  %2 = call float @llvm.pow.f32(float 1.000000e+00, float 0.000000e+00)
  %3 = fptosi float %2 to i32
  store i32 %3, i32* %x, align 4
  store i1 true, i1* %b1, align 1
  store i1 false, i1* %b2, align 1
  %4 = load i1, i1* %b1, align 1
  %5 = sext i1 %4 to i32
  %6 = sub i32 0, %5
  store i32 %6, i32* %call_arg_value, align 4
  %7 = load i1, i1* %b1, align 1
  %8 = sext i1 %7 to i32
  %9 = sub i32 0, %8
  store i32 %9, i32* %call_arg_value1, align 4
  %10 = call i32 @__module_lpython_builtin___lpython_overloaded_2___lpython_floordiv(i32* %call_arg_value, i32* %call_arg_value1)
  store i32 %10, i32* %x, align 4
  %11 = load i1, i1* %b1, align 1
  %12 = sext i1 %11 to i32
  %13 = sub i32 0, %12
  %14 = load i1, i1* %b2, align 1
  %15 = sext i1 %14 to i32
  %16 = sub i32 0, %15
  %17 = sitofp i32 %13 to float
  %18 = sitofp i32 %16 to float
  %19 = call float @llvm.pow.f32(float %17, float %18)
  %20 = fptosi float %19 to i32
  store i32 %20, i32* %x, align 4
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define i32 @__module_lpython_builtin___lpython_overloaded_2___lpython_floordiv(i32* %a, i32* %b) {
.entry:
  %_lpython_return_variable = alloca i32, align 4
  %r = alloca float, align 4
  %result = alloca i32, align 4
  %0 = load i32, i32* %a, align 4
  %1 = sitofp i32 %0 to double
  %2 = load i32, i32* %b, align 4
  %3 = sitofp i32 %2 to double
  %4 = fdiv double %1, %3
  %5 = fptrunc double %4 to float
  store float %5, float* %r, align 4
  %6 = load float, float* %r, align 4
  %7 = fptosi float %6 to i32
  store i32 %7, i32* %result, align 4
  %8 = load float, float* %r, align 4
  %9 = fpext float %8 to double
  %10 = fcmp uge double %9, 0.000000e+00
  %11 = load i32, i32* %result, align 4
  %12 = sitofp i32 %11 to float
  %13 = load float, float* %r, align 4
  %14 = fcmp ueq float %12, %13
  %15 = or i1 %10, %14
  br i1 %15, label %then, label %else

then:                                             ; preds = %.entry
  %16 = load i32, i32* %result, align 4
  store i32 %16, i32* %_lpython_return_variable, align 4
  br label %return

unreachable_after_return:                         ; No predecessors!
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %unreachable_after_return
  %17 = load i32, i32* %result, align 4
  %18 = sub i32 %17, 1
  store i32 %18, i32* %_lpython_return_variable, align 4
  br label %return

unreachable_after_return1:                        ; No predecessors!
  br label %return

return:                                           ; preds = %unreachable_after_return1, %ifcont, %then
  %19 = load i32, i32* %_lpython_return_variable, align 4
  ret i32 %19
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.pow.f64(double, double) #0

; Function Attrs: nounwind readnone speculatable willreturn
declare float @llvm.pow.f32(float, float) #0

define i32 @main() {
.entry:
  ret i32 0
}

attributes #0 = { nounwind readnone speculatable willreturn }
