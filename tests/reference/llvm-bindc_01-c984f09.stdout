; ModuleID = 'LFortran'
source_filename = "LFortran"

@queries = global void* null
@x = global i16* null
@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [13 x i8] c"%lld%s%lld%s\00", align 1
@3 = private unnamed_addr constant [16 x i8] c"AssertionError\0A\00", align 1
@4 = private unnamed_addr constant [16 x i8] c"AssertionError\0A\00", align 1

define void @__module___main_____main__global_stmts() {
.entry:
  %0 = load void*, void** @queries, align 8
  %1 = bitcast void* %0 to i16*
  store i16* %1, i16** @x, align 8
  %2 = load void*, void** @queries, align 8
  %3 = ptrtoint void* %2 to i64
  %4 = load i16*, i16** @x, align 8
  %5 = ptrtoint i16* %4 to i64
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @2, i32 0, i32 0), i64 %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), i64 %5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  call void @__module___main___test_issue_1781()
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define void @__module___main___test_issue_1781() {
.entry:
  %p = alloca void*, align 8
  store void* null, void** %p, align 8
  %0 = load void*, void** %p, align 8
  %1 = ptrtoint void* %0 to i64
  %2 = icmp eq i64 %1, 0
  br i1 %2, label %then, label %else

then:                                             ; preds = %.entry
  br label %ifcont

else:                                             ; preds = %.entry
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @3, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %3 = load void*, void** %p, align 8
  %4 = ptrtoint void* %3 to i64
  %5 = icmp ne i64 %4, 0
  %6 = xor i1 %5, true
  br i1 %6, label %then1, label %else2

then1:                                            ; preds = %ifcont
  br label %ifcont3

else2:                                            ; preds = %ifcont
  call void (i8*, ...) @_lcompilers_print_error(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @4, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont3

ifcont3:                                          ; preds = %else2, %then1
  br label %return

return:                                           ; preds = %ifcont3
  ret void
}

declare void @_lfortran_printf(i8*, ...)

declare void @_lcompilers_print_error(i8*, ...)

declare void @exit(i32)

define i32 @main(i32 %0, i8** %1) {
.entry:
  call void @_lpython_call_initial_functions(i32 %0, i8** %1)
  call void @__module___main_____main__global_stmts()
  ret i32 0
}

declare void @_lpython_call_initial_functions(i32, i8**)
