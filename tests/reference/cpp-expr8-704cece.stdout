#include <iostream>
#include <string>
#include <vector>
#include <cassert>
#include <cmath>
#include <Kokkos_Core.hpp>
#include <lfortran_intrinsics.h>

template <typename T>
Kokkos::View<T*> from_std_vector(const std::vector<T> &v)
{
    Kokkos::View<T*> r("r", v.size());
    for (size_t i=0; i < v.size(); i++) {
        r(i) = v[i];
    }
    return r;
}

void test_binop()
{
    int x;
    float x2;
    x = std::pow(2, 3);
    x = std::pow((float)(2), 3.500000);
    x = 54 - 100;
    x2 = 3.454000 - 765.430000 + 534.600000;
    x2 = 5346.565000*3.450000;
    x2 = std::pow(5346.565000, 3.450000);
}

namespace {

void main2() {
}

}
int main(int argc, char* argv[])
{
    Kokkos::initialize(argc, argv);
    main2();
    Kokkos::finalize();
    return 0;
}
