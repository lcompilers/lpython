#include <iostream>
#include <string>
#include <vector>
#include <cassert>
#include <cmath>
#include <complex>
#include <Kokkos_Core.hpp>
#include <lfortran_intrinsics.h>

template <typename T>
Kokkos::View<T*> from_std_vector(const std::vector<T> &v)
{
    Kokkos::View<T*> r("r", v.size());
    for (size_t i=0; i < v.size(); i++) {
        r(i) = v[i];
    }
    return r;
}

void test_binop()
{
    bool b1;
    bool b2;
    int x;
    float x2;
    x = std::pow(2, 3);
    x2 = std::pow((float)(2), 3.500000);
    x = 54 - 100;
    x2 = 3.454000 - 765.430000 + 534.600000;
    x2 = 5346.565000*3.450000;
    x2 = std::pow(5346.565000, 3.450000);
    x = (int)(true) + (int)(true);
    x = (int)(true) - (int)(false);
    x = (int)(true)*(int)(false);
    x = std::pow((int)(true), (int)(false));
    b1 = true;
    b2 = false;
    x = __lpython_overloaded_2___lpython_floordiv((int)(b1), (int)(b1));
    x = std::pow((int)(b1), (int)(b2));
}

int __lpython_overloaded_2___lpython_floordiv(int a, int b)
{
    int _lpython_return_variable;
    float r;
    int result;
    r = (float)(a)/(float)(b);
    result = (int)(r);
    if (r >= 0.000000 || (float)(result) == r) {
        _lpython_return_variable = result;
        return _lpython_return_variable;
    }
    _lpython_return_variable = result - 1;
    return _lpython_return_variable;
}

namespace {

void main2() {
}

}
int main(int argc, char* argv[])
{
    Kokkos::initialize(argc, argv);
    main2();
    Kokkos::finalize();
    return 0;
}
