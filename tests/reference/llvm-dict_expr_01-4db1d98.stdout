; ModuleID = 'LFortran'
source_filename = "LFortran"

%dict = type { i32, %list, %list.0, i8* }
%list = type { i32, i32, i64* }
%list.0 = type { i32, i32, double* }

define void @_lpython_main_program() {
.entry:
  call void @test_dict()
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define void @test_dict() {
.entry:
  %mydictionarty3 = alloca %dict, align 8
  %const_dict = alloca %dict, align 8
  %0 = getelementptr %dict, %dict* %const_dict, i32 0, i32 0
  store i32 0, i32* %0, align 4
  %1 = getelementptr %dict, %dict* %const_dict, i32 0, i32 1
  %2 = getelementptr %dict, %dict* %const_dict, i32 0, i32 2
  %3 = call i8* (i32, ...) @_lfortran_malloc(i32 0)
  %4 = bitcast i8* %3 to i64*
  %5 = getelementptr %list, %list* %1, i32 0, i32 2
  store i64* %4, i64** %5, align 8
  %6 = getelementptr %list, %list* %1, i32 0, i32 0
  store i32 0, i32* %6, align 4
  %7 = getelementptr %list, %list* %1, i32 0, i32 1
  store i32 0, i32* %7, align 4
  %8 = call i8* (i32, ...) @_lfortran_malloc(i32 0)
  %9 = bitcast i8* %8 to double*
  %10 = getelementptr %list.0, %list.0* %2, i32 0, i32 2
  store double* %9, double** %10, align 8
  %11 = getelementptr %list.0, %list.0* %2, i32 0, i32 0
  store i32 0, i32* %11, align 4
  %12 = getelementptr %list.0, %list.0* %2, i32 0, i32 1
  store i32 0, i32* %12, align 4
  %13 = call i8* (i32, i32, ...) @_lfortran_calloc(i32 0, i32 1)
  %14 = getelementptr %dict, %dict* %const_dict, i32 0, i32 3
  store i8* %13, i8** %14, align 8
  %15 = getelementptr %dict, %dict* %const_dict, i32 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr %dict, %dict* %mydictionarty3, i32 0, i32 0
  store i32 %16, i32* %17, align 4
  %18 = getelementptr %dict, %dict* %const_dict, i32 0, i32 1
  %19 = getelementptr %dict, %dict* %mydictionarty3, i32 0, i32 1
  %20 = getelementptr %list, %list* %18, i32 0, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr %list, %list* %18, i32 0, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr %list, %list* %19, i32 0, i32 0
  %25 = getelementptr %list, %list* %19, i32 0, i32 1
  store i32 %21, i32* %24, align 4
  store i32 %23, i32* %25, align 4
  %26 = getelementptr %list, %list* %18, i32 0, i32 2
  %27 = load i64*, i64** %26, align 8
  %28 = mul i32 8, %23
  %29 = call i8* (i32, ...) @_lfortran_malloc(i32 %28)
  %30 = bitcast i8* %29 to i64*
  %31 = bitcast i64* %30 to i8*
  %32 = bitcast i64* %27 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %31, i8* %32, i32 %28, i1 false)
  %33 = getelementptr %list, %list* %19, i32 0, i32 2
  store i64* %30, i64** %33, align 8
  %34 = getelementptr %dict, %dict* %const_dict, i32 0, i32 2
  %35 = getelementptr %dict, %dict* %mydictionarty3, i32 0, i32 2
  %36 = getelementptr %list.0, %list.0* %34, i32 0, i32 0
  %37 = load i32, i32* %36, align 4
  %38 = getelementptr %list.0, %list.0* %34, i32 0, i32 1
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr %list.0, %list.0* %35, i32 0, i32 0
  %41 = getelementptr %list.0, %list.0* %35, i32 0, i32 1
  store i32 %37, i32* %40, align 4
  store i32 %39, i32* %41, align 4
  %42 = getelementptr %list.0, %list.0* %34, i32 0, i32 2
  %43 = load double*, double** %42, align 8
  %44 = mul i32 8, %39
  %45 = call i8* (i32, ...) @_lfortran_malloc(i32 %44)
  %46 = bitcast i8* %45 to double*
  %47 = bitcast double* %46 to i8*
  %48 = bitcast double* %43 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %47, i8* %48, i32 %44, i1 false)
  %49 = getelementptr %list.0, %list.0* %35, i32 0, i32 2
  store double* %46, double** %49, align 8
  %50 = getelementptr %dict, %dict* %const_dict, i32 0, i32 3
  %51 = load i8*, i8** %50, align 8
  %52 = getelementptr %dict, %dict* %mydictionarty3, i32 0, i32 3
  %53 = getelementptr %dict, %dict* %const_dict, i32 0, i32 2
  %54 = getelementptr %list.0, %list.0* %53, i32 0, i32 1
  %55 = load i32, i32* %54, align 4
  %56 = call i8* (i32, i32, ...) @_lfortran_calloc(i32 %55, i32 1)
  %57 = mul i32 %55, 1
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %56, i8* %51, i32 %57, i1 false)
  store i8* %56, i8** %52, align 8
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare i8* @_lfortran_malloc(i32, ...)

declare i8* @_lfortran_calloc(i32, i32, ...)

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i32, i1 immarg) #0

define i32 @main() {
.entry:
  call void @_lpython_main_program()
  ret i32 0
}

attributes #0 = { argmemonly nounwind willreturn }
