#include <iostream>
#include <string>
#include <vector>
#include <cassert>
#include <cmath>
#include <complex>
#include <Kokkos_Core.hpp>
#include <lfortran_intrinsics.h>

template <typename T>
Kokkos::View<T*> from_std_vector(const std::vector<T> &v)
{
    Kokkos::View<T*> r("r", v.size());
    for (size_t i=0; i < v.size(); i++) {
        r(i) = v[i];
    }
    return r;
}

void test_for()
{
    int i;
    for (i=0; i<=10 - 1; i++) {
        if (i == 0) {
            continue;
        }
        if (i > 5) {
            break;
        }
        if (i == 3) {
            exit(0);
        }
    }
    exit(0);
}

void exit(int error_code)
{
    exit(0);
}

namespace {

void main2() {
}

}
int main(int argc, char* argv[])
{
    Kokkos::initialize(argc, argv);
    main2();
    Kokkos::finalize();
    return 0;
}
