; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [7 x i8] c"%lld%s\00", align 1
@3 = private unnamed_addr constant [16 x i8] c"AssertionError\0A\00", align 1

define void @_lpython_main_program() {
.entry:
  call void @_xx_lcompilers_changed_main_xx()
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define i64 @fib(i64* %n) {
.entry:
  %call_arg_value1 = alloca i64, align 8
  %call_arg_value = alloca i64, align 8
  %_lpython_return_variable = alloca i64, align 8
  %0 = load i64, i64* %n, align 4
  %1 = icmp slt i64 %0, 2
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  %2 = load i64, i64* %n, align 4
  store i64 %2, i64* %_lpython_return_variable, align 4
  br label %return

unreachable_after_return:                         ; No predecessors!
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %unreachable_after_return
  %3 = load i64, i64* %n, align 4
  %4 = sub i64 %3, 1
  store i64 %4, i64* %call_arg_value, align 4
  %5 = call i64 @fib(i64* %call_arg_value)
  %6 = load i64, i64* %n, align 4
  %7 = sub i64 %6, 2
  store i64 %7, i64* %call_arg_value1, align 4
  %8 = call i64 @fib(i64* %call_arg_value1)
  %9 = add i64 %5, %8
  store i64 %9, i64* %_lpython_return_variable, align 4
  br label %return

unreachable_after_return2:                        ; No predecessors!
  br label %return

return:                                           ; preds = %unreachable_after_return2, %ifcont, %then
  %10 = load i64, i64* %_lpython_return_variable, align 4
  ret i64 %10
}

define void @_xx_lcompilers_changed_main_xx() {
.entry:
  %call_arg_value1 = alloca i64, align 8
  %call_arg_value = alloca i64, align 8
  %_lpython_return_variable_fib = alloca i64, align 8
  %ans = alloca i64, align 8
  %n_fib = alloca i64, align 8
  %x = alloca i64, align 8
  store i64 40, i64* %x, align 4
  %0 = load i64, i64* %x, align 4
  store i64 %0, i64* %n_fib, align 4
  %1 = load i64, i64* %n_fib, align 4
  %2 = icmp slt i64 %1, 2
  br i1 %2, label %then, label %else

then:                                             ; preds = %.entry
  %3 = load i64, i64* %n_fib, align 4
  store i64 %3, i64* %_lpython_return_variable_fib, align 4
  br label %goto_target

unreachable_after_goto:                           ; No predecessors!
  br label %ifcont

else:                                             ; preds = %.entry
  br label %ifcont

ifcont:                                           ; preds = %else, %unreachable_after_goto
  %4 = load i64, i64* %n_fib, align 4
  %5 = sub i64 %4, 1
  store i64 %5, i64* %call_arg_value, align 4
  %6 = call i64 @fib(i64* %call_arg_value)
  %7 = load i64, i64* %n_fib, align 4
  %8 = sub i64 %7, 2
  store i64 %8, i64* %call_arg_value1, align 4
  %9 = call i64 @fib(i64* %call_arg_value1)
  %10 = add i64 %6, %9
  store i64 %10, i64* %_lpython_return_variable_fib, align 4
  br label %goto_target

unreachable_after_goto2:                          ; No predecessors!
  br label %goto_target

goto_target:                                      ; preds = %unreachable_after_goto2, %ifcont, %then
  %11 = load i64, i64* %_lpython_return_variable_fib, align 4
  store i64 %11, i64* %ans, align 4
  %12 = load i64, i64* %ans, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @2, i32 0, i32 0), i64 %12, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  %13 = load i64, i64* %ans, align 4
  %14 = icmp eq i64 %13, 102334155
  br i1 %14, label %then3, label %else4

then3:                                            ; preds = %goto_target
  br label %ifcont5

else4:                                            ; preds = %goto_target
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @3, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont5

ifcont5:                                          ; preds = %else4, %then3
  br label %return

return:                                           ; preds = %ifcont5
  ret void
}

declare void @_lfortran_printf(i8*, ...)

declare void @exit(i32)

define i32 @main() {
.entry:
  call void @_lpython_main_program()
  ret i32 0
}
