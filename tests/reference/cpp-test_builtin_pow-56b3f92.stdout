#include <iostream>
#include <string>
#include <vector>
#include <cassert>
#include <cmath>
#include <complex>
#include <Kokkos_Core.hpp>
#include <lfortran_intrinsics.h>

template <typename T>
Kokkos::View<T*> from_std_vector(const std::vector<T> &v)
{
    Kokkos::View<T*> r("r", v.size());
    for (size_t i=0; i < v.size(); i++) {
        r(i) = v[i];
    }
    return r;
}

void _lpython_main_program()
{
    test_pow();
}

void test_pow()
{
    int a;
    double a1;
    double a2;
    int b;
    bool b1;
    bool b2;
    std::complex<float> c1;
    double eps;
    float f1;
    float f2;
    long long i1;
    long long i2;
    float p;
    int x;
    double y;
    eps = 0.000000;
    a = 2;
    b = 5;
    assert (__lpython_overloaded_0__pow(a, b) == 32);
    a = 6;
    b = 3;
    assert (__lpython_overloaded_0__pow(a, b) == 216);
    a = 2;
    b = 0;
    assert (__lpython_overloaded_0__pow(a, b) == 1);
    a = 2;
    b = -1;
    a = 6;
    b = -4;
    i1 = 2;
    i2 = 5;
    assert (__lpython_overloaded_1__pow(i1, i2) == 32);
    i1 = 6;
    i2 = -3;
    f1 = (float)(525346)/(float)(66456);
    f2 = 3.000000;
    p = __lpython_overloaded_2__pow(f1, f2);
    f1 = __lpython_overloaded_4__pow(a, f2);
    f1 = __lpython_overloaded_5__pow(f2, a);
    assert (__lpython_overloaded_8__pow(b1, b2) == 1);
    assert (__lpython_overloaded_8__pow(b2, b1) == 0);
    assert (__lpython_overloaded_8__pow(b1, b2) == 1);
    assert (__lpython_overloaded_8__pow(false, false) == 1);
    assert (__lpython_overloaded_0__abs(__lpython_overloaded_3__pow(a1, a2) - 31.797193) < eps);
    assert (__lpython_overloaded_0__abs(__lpython_overloaded_3__pow(a2, a1) - 42.439989) < eps);
    assert (__lpython_overloaded_0__abs(__lpython_overloaded_6__pow(x, y) - 12.513503) < eps);
    assert (__lpython_overloaded_0__abs(__lpython_overloaded_7__pow(y, x) - 12.167000) < eps);
    assert (__lpython_overloaded_0__abs(__lpython_overloaded_6__pow(x, 5.500000) - 420.888346) < eps);
    assert (__lpython_overloaded_0__abs((float)(__lpython_overloaded_0__pow(2, -1)) - 0.500000) < eps);
    assert (__lpython_overloaded_0__abs((float)(__lpython_overloaded_0__pow(6, -4)) - 0.000772) < eps);
    assert (__lpython_overloaded_0__abs((float)(__lpython_overloaded_0__pow(-3, -5)) + 0.004115) < eps);
    assert (__lpython_overloaded_0__abs((float)(__lpython_overloaded_0__pow(6, -4)) - 0.000772) < eps);
    assert (__lpython_overloaded_0__abs(__lpython_overloaded_3__pow(4.500000, 2.300000) - 31.797193) < eps);
    assert (__lpython_overloaded_0__abs(__lpython_overloaded_3__pow(2.300000, 0.000000) - 1.000000) < eps);
    assert (__lpython_overloaded_0__abs(__lpython_overloaded_3__pow(2.300000, -1.500000) - 0.286687) < eps);
    assert (__lpython_overloaded_0__abs(__lpython_overloaded_6__pow(2, 3.400000) - 10.556063) < eps);
    assert (__lpython_overloaded_0__abs(__lpython_overloaded_6__pow(2, -3.400000) - 0.094732) < eps);
    assert (__lpython_overloaded_0__abs(__lpython_overloaded_7__pow(3.400000, 9) - 60716.992766) < eps);
    assert (__lpython_overloaded_0__abs(__lpython_overloaded_7__pow(0.000000, 53) - 0.000000) < eps);
    assert (__lpython_overloaded_0__pow(4, 2) == 16);
    assert (__lpython_overloaded_0__abs(__lpython_overloaded_7__pow(-4235.000000, 52) - 394800380598526378720936476336799774273305305904443955996320177992404102454228192853661558132283280490733920647962082901303487965679010854404517306573035287122910924343151116372519789002752.000000) < eps);
    c1 = __lpython_overloaded_9__complex(4, 5);
    c1 = __lpython_overloaded_9__pow(c1, 4);
}

float __lpython_overloaded_0__abs(double x)
{
    double _lpython_return_variable;
    if (x >= 0.000000) {
        _lpython_return_variable = x;
        return _lpython_return_variable;
    } else {
        _lpython_return_variable = -x;
        return _lpython_return_variable;
    }
    return _lpython_return_variable;
}

int __lpython_overloaded_0__pow(int x, int y)
{
    int _lpython_return_variable;
    _lpython_return_variable = std::pow(x, y);
    return _lpython_return_variable;
}

long long __lpython_overloaded_1__pow(long long x, long long y)
{
    long long _lpython_return_variable;
    _lpython_return_variable = std::pow(x, y);
    return _lpython_return_variable;
}

float __lpython_overloaded_2__pow(float x, float y)
{
    float _lpython_return_variable;
    _lpython_return_variable = std::pow(x, y);
    return _lpython_return_variable;
}

float __lpython_overloaded_3__pow(double x, double y)
{
    double _lpython_return_variable;
    _lpython_return_variable = std::pow(x, y);
    return _lpython_return_variable;
}

float __lpython_overloaded_4__pow(int x, float y)
{
    float _lpython_return_variable;
    _lpython_return_variable = std::pow((float)(x), y);
    return _lpython_return_variable;
}

float __lpython_overloaded_5__pow(float x, int y)
{
    float _lpython_return_variable;
    _lpython_return_variable = std::pow(x, (float)(y));
    return _lpython_return_variable;
}

float __lpython_overloaded_6__pow(int x, double y)
{
    double _lpython_return_variable;
    _lpython_return_variable = std::pow((float)(x), y);
    return _lpython_return_variable;
}

float __lpython_overloaded_7__pow(double x, int y)
{
    double _lpython_return_variable;
    _lpython_return_variable = std::pow(x, (float)(y));
    return _lpython_return_variable;
}

int __lpython_overloaded_8__pow(bool x, bool y)
{
    int _lpython_return_variable;
    if (y && !x) {
        _lpython_return_variable = 0;
        return _lpython_return_variable;
    }
    _lpython_return_variable = 1;
    return _lpython_return_variable;
}

std::complex<float> __lpython_overloaded_9__complex(int x, int y)
{
    std::complex<float> _lpython_return_variable;
    _lpython_return_variable = std::complex<double>(x) + std::complex<double>(y)*std::complex<double>(0.000000, 1.000000);
    return _lpython_return_variable;
}

std::complex<float> __lpython_overloaded_9__pow(std::complex<float> c, int y)
{
    std::complex<float> _lpython_return_variable;
    _lpython_return_variable = std::pow(c, std::complex<double>(y));
    return _lpython_return_variable;
}

namespace {

void main2() {
        _lpython_main_program();
}

}
int main(int argc, char* argv[])
{
    Kokkos::initialize(argc, argv);
    main2();
    Kokkos::finalize();
    return 0;
}
