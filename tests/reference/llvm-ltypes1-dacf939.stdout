; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@1 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@2 = private unnamed_addr constant [6 x i8] c"%lld\0A\00", align 1
@3 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

define void @test_i16() {
.entry:
  %i = alloca i16, align 2
  store i16 4, i16* %i, align 2
  %0 = load i16, i16* %i, align 2
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @0, i32 0, i32 0), i16 %0)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define void @test_i32() {
.entry:
  %i = alloca i32, align 4
  store i32 3, i32* %i, align 4
  %0 = load i32, i32* %i, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1, i32 0, i32 0), i32 %0)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define void @test_i64() {
.entry:
  %i = alloca i64, align 8
  store i64 2, i64* %i, align 4
  %0 = load i64, i64* %i, align 4
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i32 0, i32 0), i64 %0)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define void @test_i8() {
.entry:
  %i = alloca i8, align 1
  store i8 5, i8* %i, align 1
  %0 = load i8, i8* %i, align 1
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @3, i32 0, i32 0), i8 %0)
  br label %return

return:                                           ; preds = %.entry
  ret void
}

declare void @_lfortran_printf(i8*, ...)
