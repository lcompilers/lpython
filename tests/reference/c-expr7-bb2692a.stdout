#include <complex.h>
#include <inttypes.h>
#include <math.h>

#include <stdlib.h>
#include <stdbool.h>
#include <stdio.h>
#include <string.h>
#include <lfortran_intrinsics.h>

float _lcompilers_optimization_floordiv_f32(float a, float b);
double _lcompilers_optimization_floordiv_f64(double a, double b);
int16_t _lcompilers_optimization_floordiv_i16(int16_t a, int16_t b);
int32_t _lcompilers_optimization_floordiv_i32(int32_t a, int32_t b);
int32_t _lcompilers_optimization_floordiv_i321(int32_t a, int32_t b);
int32_t _lcompilers_optimization_floordiv_i3210(int32_t a, int32_t b);
int32_t _lcompilers_optimization_floordiv_i322(int32_t a, int32_t b);
int32_t _lcompilers_optimization_floordiv_i323(int32_t a, int32_t b);
int32_t _lcompilers_optimization_floordiv_i324(int32_t a, int32_t b);
int32_t _lcompilers_optimization_floordiv_i325(int32_t a, int32_t b);
int32_t _lcompilers_optimization_floordiv_i326(int32_t a, int32_t b);
int32_t _lcompilers_optimization_floordiv_i327(int32_t a, int32_t b);
int32_t _lcompilers_optimization_floordiv_i328(int32_t a, int32_t b);
int32_t _lcompilers_optimization_floordiv_i329(int32_t a, int32_t b);
int64_t _lcompilers_optimization_floordiv_i64(int64_t a, int64_t b);
int8_t _lcompilers_optimization_floordiv_i8(int8_t a, int8_t b);
uint16_t _lcompilers_optimization_floordiv_u16(uint16_t a, uint16_t b);
uint32_t _lcompilers_optimization_floordiv_u32(uint32_t a, uint32_t b);
uint64_t _lcompilers_optimization_floordiv_u64(uint64_t a, uint64_t b);
uint8_t _lcompilers_optimization_floordiv_u8(uint8_t a, uint8_t b);
void test_pow();
int32_t test_pow_1(int32_t a, int32_t b);
void main0();
void __main__global_stmts();



// Implementations
float _lcompilers_optimization_floordiv_f32(float a, float b)
{
    double r;
    float result;
    int64_t tmp;
    r = a/b;
    tmp = (int64_t)(r);
    if (r <   0.00000000000000000e+00 && (double)(tmp) != r) {
        tmp = tmp - 1;
    }
    result = (float)(tmp);
    return result;
}

double _lcompilers_optimization_floordiv_f64(double a, double b)
{
    double r;
    double result;
    int64_t tmp;
    r = a/b;
    tmp = (int64_t)(r);
    if (r <   0.00000000000000000e+00 && (double)(tmp) != r) {
        tmp = tmp - 1;
    }
    result = (double)(tmp);
    return result;
}

int16_t _lcompilers_optimization_floordiv_i16(int16_t a, int16_t b)
{
    double r;
    int16_t result;
    int64_t tmp;
    r = (double)(a)/(double)(b);
    tmp = (int64_t)(r);
    if (r <   0.00000000000000000e+00 && (double)(tmp) != r) {
        tmp = tmp - 1;
    }
    result = tmp;
    return result;
}

int32_t _lcompilers_optimization_floordiv_i32(int32_t a, int32_t b)
{
    double r;
    int32_t result;
    int64_t tmp;
    r = (double)(a)/(double)(b);
    tmp = (int64_t)(r);
    if (r <   0.00000000000000000e+00 && (double)(tmp) != r) {
        tmp = tmp - 1;
    }
    result = tmp;
    return result;
}

int32_t _lcompilers_optimization_floordiv_i321(int32_t a, int32_t b)
{
    double r;
    int32_t result;
    int64_t tmp;
    r = (double)(a)/(double)(b);
    tmp = (int64_t)(r);
    if (r <   0.00000000000000000e+00 && (double)(tmp) != r) {
        tmp = tmp - 1;
    }
    result = tmp;
    return result;
}

int32_t _lcompilers_optimization_floordiv_i3210(int32_t a, int32_t b)
{
    double r;
    int32_t result;
    int64_t tmp;
    r = (double)(a)/(double)(b);
    tmp = (int64_t)(r);
    if (r <   0.00000000000000000e+00 && (double)(tmp) != r) {
        tmp = tmp - 1;
    }
    result = tmp;
    return result;
}

int32_t _lcompilers_optimization_floordiv_i322(int32_t a, int32_t b)
{
    double r;
    int32_t result;
    int64_t tmp;
    r = (double)(a)/(double)(b);
    tmp = (int64_t)(r);
    if (r <   0.00000000000000000e+00 && (double)(tmp) != r) {
        tmp = tmp - 1;
    }
    result = tmp;
    return result;
}

int32_t _lcompilers_optimization_floordiv_i323(int32_t a, int32_t b)
{
    double r;
    int32_t result;
    int64_t tmp;
    r = (double)(a)/(double)(b);
    tmp = (int64_t)(r);
    if (r <   0.00000000000000000e+00 && (double)(tmp) != r) {
        tmp = tmp - 1;
    }
    result = tmp;
    return result;
}

int32_t _lcompilers_optimization_floordiv_i324(int32_t a, int32_t b)
{
    double r;
    int32_t result;
    int64_t tmp;
    r = (double)(a)/(double)(b);
    tmp = (int64_t)(r);
    if (r <   0.00000000000000000e+00 && (double)(tmp) != r) {
        tmp = tmp - 1;
    }
    result = tmp;
    return result;
}

int32_t _lcompilers_optimization_floordiv_i325(int32_t a, int32_t b)
{
    double r;
    int32_t result;
    int64_t tmp;
    r = (double)(a)/(double)(b);
    tmp = (int64_t)(r);
    if (r <   0.00000000000000000e+00 && (double)(tmp) != r) {
        tmp = tmp - 1;
    }
    result = tmp;
    return result;
}

int32_t _lcompilers_optimization_floordiv_i326(int32_t a, int32_t b)
{
    double r;
    int32_t result;
    int64_t tmp;
    r = (double)(a)/(double)(b);
    tmp = (int64_t)(r);
    if (r <   0.00000000000000000e+00 && (double)(tmp) != r) {
        tmp = tmp - 1;
    }
    result = tmp;
    return result;
}

int32_t _lcompilers_optimization_floordiv_i327(int32_t a, int32_t b)
{
    double r;
    int32_t result;
    int64_t tmp;
    r = (double)(a)/(double)(b);
    tmp = (int64_t)(r);
    if (r <   0.00000000000000000e+00 && (double)(tmp) != r) {
        tmp = tmp - 1;
    }
    result = tmp;
    return result;
}

int32_t _lcompilers_optimization_floordiv_i328(int32_t a, int32_t b)
{
    double r;
    int32_t result;
    int64_t tmp;
    r = (double)(a)/(double)(b);
    tmp = (int64_t)(r);
    if (r <   0.00000000000000000e+00 && (double)(tmp) != r) {
        tmp = tmp - 1;
    }
    result = tmp;
    return result;
}

int32_t _lcompilers_optimization_floordiv_i329(int32_t a, int32_t b)
{
    double r;
    int32_t result;
    int64_t tmp;
    r = (double)(a)/(double)(b);
    tmp = (int64_t)(r);
    if (r <   0.00000000000000000e+00 && (double)(tmp) != r) {
        tmp = tmp - 1;
    }
    result = tmp;
    return result;
}

int64_t _lcompilers_optimization_floordiv_i64(int64_t a, int64_t b)
{
    double r;
    int64_t result;
    int64_t tmp;
    r = (double)(a)/(double)(b);
    tmp = (int64_t)(r);
    if (r <   0.00000000000000000e+00 && (double)(tmp) != r) {
        tmp = tmp - 1;
    }
    result = tmp;
    return result;
}

int8_t _lcompilers_optimization_floordiv_i8(int8_t a, int8_t b)
{
    double r;
    int8_t result;
    int64_t tmp;
    r = (double)(a)/(double)(b);
    tmp = (int64_t)(r);
    if (r <   0.00000000000000000e+00 && (double)(tmp) != r) {
        tmp = tmp - 1;
    }
    result = tmp;
    return result;
}

uint16_t _lcompilers_optimization_floordiv_u16(uint16_t a, uint16_t b)
{
    double r;
    uint16_t result;
    int64_t tmp;
    r = (double)(a)/(double)(b);
    tmp = (int64_t)(r);
    if (r <   0.00000000000000000e+00 && (double)(tmp) != r) {
        tmp = tmp - 1;
    }
    result = (uint16_t)(tmp);
    return result;
}

uint32_t _lcompilers_optimization_floordiv_u32(uint32_t a, uint32_t b)
{
    double r;
    uint32_t result;
    int64_t tmp;
    r = (double)(a)/(double)(b);
    tmp = (int64_t)(r);
    if (r <   0.00000000000000000e+00 && (double)(tmp) != r) {
        tmp = tmp - 1;
    }
    result = (uint32_t)(tmp);
    return result;
}

uint64_t _lcompilers_optimization_floordiv_u64(uint64_t a, uint64_t b)
{
    double r;
    uint64_t result;
    int64_t tmp;
    r = (double)(a)/(double)(b);
    tmp = (int64_t)(r);
    if (r <   0.00000000000000000e+00 && (double)(tmp) != r) {
        tmp = tmp - 1;
    }
    result = (uint64_t)(tmp);
    return result;
}

uint8_t _lcompilers_optimization_floordiv_u8(uint8_t a, uint8_t b)
{
    double r;
    uint8_t result;
    int64_t tmp;
    r = (double)(a)/(double)(b);
    tmp = (int64_t)(r);
    if (r <   0.00000000000000000e+00 && (double)(tmp) != r) {
        tmp = tmp - 1;
    }
    result = (uint8_t)(tmp);
    return result;
}

double __lpython_overloaded_0__pow(int32_t x, int32_t y)
{
    double _lpython_return_variable;
    _lpython_return_variable = (double)(pow(x, y));
    return _lpython_return_variable;
}

float _lfortran_caimag(float_complex_t x);

double _lfortran_zaimag(double_complex_t x);

void test_pow()
{
    int32_t a;
    a = (int32_t)(  4.00000000000000000e+00);
}

int32_t test_pow_1(int32_t a, int32_t b)
{
    int32_t _lpython_return_variable;
    int32_t res;
    res = (int32_t)(__lpython_overloaded_0__pow(a, b));
    _lpython_return_variable = res;
    return _lpython_return_variable;
}

void main0()
{
    int32_t c;
    test_pow();
    c = test_pow_1(1, 2);
}

void __main__global_stmts()
{
    main0();
}

int main(int argc, char* argv[])
{
    _lpython_set_argv(argc, argv);
    __main__global_stmts();
    return 0;
}
