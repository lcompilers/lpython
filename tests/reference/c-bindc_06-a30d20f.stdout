#include <complex.h>
#include <inttypes.h>
#include "bindc_06b.h"

#include <stdlib.h>
#include <stdbool.h>
#include <stdio.h>
#include <string.h>
#include <lfortran_intrinsics.h>

#define ASSERT(cond)                                                           \
    {                                                                          \
        if (!(cond)) {                                                         \
            printf("%s%s", "ASSERT failed: ", __FILE__);                       \
            printf("%s%s", "\nfunction ", __func__);                           \
            printf("%s%d%s", "(), line number ", __LINE__, " at \n");          \
            printf("%s%s", #cond, "\n");                                       \
            exit(1);                                                           \
        }                                                                      \
    }
#define ASSERT_MSG(cond, msg)                                                  \
    {                                                                          \
        if (!(cond)) {                                                         \
            printf("%s%s", "ASSERT failed: ", __FILE__);                       \
            printf("%s%s", "\nfunction ", __func__);                           \
            printf("%s%d%s", "(), line number ", __LINE__, " at \n");          \
            printf("%s%s", #cond, "\n");                                       \
            printf("%s", "ERROR MESSAGE:\n");                                  \
            printf("%s%s", msg, "\n");                                         \
            exit(1);                                                           \
        }                                                                      \
    }


struct dimension_descriptor
{
    int32_t lower_bound, length;
};
struct CompareOperator {
 int32_t op_code;
 char * op_name;
};


struct i32
{
    int32_t *data;
    struct dimension_descriptor dims[32];
    int32_t n_dims;
    bool is_allocated;
};


struct r64
{
    double *data;
    struct dimension_descriptor dims[32];
    int32_t n_dims;
    bool is_allocated;
};


// Implementations
void test_arrays()
{
    struct i32 array1_value;
    struct i32* array1 = &array1_value;
    int32_t array1_data[40];
    array1->data = array1_data;
    array1->n_dims = 1;
    array1->dims[0].lower_bound = 0;
    array1->dims[0].length = 40;
    struct r64 array2_value;
    struct r64* array2 = &array2_value;
    double array2_data[40];
    array2->data = array2_data;
    array2->n_dims = 1;
    array2->dims[0].lower_bound = 0;
    array2->dims[0].length = 40;
    struct CompareOperator compare_operator_value;
    struct CompareOperator* compare_operator = &compare_operator_value;
    compare_operator->op_name = NULL;
    int32_t i;
    bool is_small;
    compare_operator->op_code = 0;
    _lfortran_strcpy(&compare_operator->op_name, "<");
    for (i=0; i<=40 - 1; i++) {
        array1->data[(i - array1->dims[0].lower_bound)] = i + 1;
        array2->data[(i - array2->dims[0].lower_bound)] = (double)(2*i + 1);
    }
    is_small = true;
    for (i=0; i<=40 - 1; i++) {
        is_small = is_small && (bool)(compare_array_element(array1->data[(i - array1->dims[0].lower_bound)], array2->data[(i - array2->dims[0].lower_bound)], compare_operator->op_code));
    }
    printf("%d\n", is_small);
    ASSERT(is_small == true);
}

void _lpython_main_program()
{
    test_arrays();
}

float _lfortran_caimag(float complex x);

double _lfortran_zaimag(double complex x);

float pi_32 =   3.14159265358979312e+00;
double pi_64 =   3.14159265358979312e+00;
double _lfortran_dacos(double x);

double _lfortran_dacosh(double x);

double _lfortran_dasin(double x);

double _lfortran_dasinh(double x);

double _lfortran_datan(double x);

double _lfortran_datanh(double x);

double _lfortran_dcos(double x);

double _lfortran_dcosh(double x);

double _lfortran_dexp(double x);

double _lfortran_dlog(double x);

double _lfortran_dlog10(double x);

double _lfortran_dsin(double x);

double _lfortran_dsinh(double x);

double _lfortran_dtan(double x);

double _lfortran_dtanh(double x);

float _lfortran_sacos(float x);

float _lfortran_sacosh(float x);

float _lfortran_sasin(float x);

float _lfortran_sasinh(float x);

float _lfortran_satan(float x);

float _lfortran_satanh(float x);

float _lfortran_scos(float x);

float _lfortran_scosh(float x);

float _lfortran_sexp(float x);

float _lfortran_slog(float x);

float _lfortran_slog10(float x);

float _lfortran_ssin(float x);

float _lfortran_ssinh(float x);

float _lfortran_stan(float x);

float _lfortran_stanh(float x);

int main(int argc, char* argv[])
{
    _lpython_set_argv(argc, argv);
    _lpython_main_program();
    return 0;
}
