; ModuleID = 'LFortran'
source_filename = "LFortran"

%array = type { i16*, i32, %dimension_descriptor*, i1, i32 }
%dimension_descriptor = type { i32, i32, i32 }

@queries = global void* null
@x = global %array* null
@0 = private unnamed_addr constant [2 x i8] c" \00", align 1
@1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@2 = private unnamed_addr constant [13 x i8] c"%lld%s%lld%s\00", align 1
@3 = private unnamed_addr constant [2 x i8] c" \00", align 1
@4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@5 = private unnamed_addr constant [13 x i8] c"%lld%s%lld%s\00", align 1
@6 = private unnamed_addr constant [2 x i8] c" \00", align 1
@7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@8 = private unnamed_addr constant [9 x i8] c"%d%s%d%s\00", align 1
@9 = private unnamed_addr constant [16 x i8] c"AssertionError\0A\00", align 1
@10 = private unnamed_addr constant [16 x i8] c"AssertionError\0A\00", align 1
@11 = private unnamed_addr constant [2 x i8] c" \00", align 1
@12 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@13 = private unnamed_addr constant [13 x i8] c"%lld%s%lld%s\00", align 1

define void @_lpython_main_program() {
.entry:
  %0 = load void*, void** @queries
  %1 = alloca %array
  %2 = alloca %dimension_descriptor
  %3 = getelementptr %array, %array* %1, i32 0, i32 2
  store %dimension_descriptor* %2, %dimension_descriptor** %3
  %4 = getelementptr %array, %array* %1, i32 0, i32 4
  store i32 1, i32* %4
  store %array* %1, %array** @x
  %5 = getelementptr %array, %array* %1, i32 0, i32 0
  %6 = getelementptr %array, %array* %1, i32 0, i32 2
  %7 = load %dimension_descriptor*, %dimension_descriptor** %6
  %8 = bitcast void* %0 to i16*
  store i16* %8, i16** %5
  %9 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %7, i32 0
  %10 = getelementptr %dimension_descriptor, %dimension_descriptor* %9, i32 0, i32 1
  %11 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %7, i32 0
  %12 = getelementptr %dimension_descriptor, %dimension_descriptor* %11, i32 0, i32 2
  store i32 1, i32* %10
  store i32 1, i32* %12
  %13 = load void*, void** @queries
  %14 = ptrtoint void* %13 to i64
  %15 = load %array*, %array** @x
  %16 = getelementptr %array, %array* %15, i32 0, i32 0
  %17 = load i16*, i16** %16
  %18 = ptrtoint i16* %17 to i64
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @2, i32 0, i32 0), i64 %14, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @0, i32 0, i32 0), i64 %18, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0))
  call void @f()
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define void @f() {
.entry:
  %y = alloca %array
  %0 = getelementptr %array, %array* %y, i32 0, i32 1
  store i32 0, i32* %0
  %1 = getelementptr %array, %array* %y, i32 0, i32 2
  %2 = alloca i32
  store i32 1, i32* %2
  %3 = load i32, i32* %2
  %4 = alloca %dimension_descriptor, i32 %3
  %5 = getelementptr %array, %array* %y, i32 0, i32 4
  store i32 1, i32* %5
  store %dimension_descriptor* %4, %dimension_descriptor** %1
  %6 = load %dimension_descriptor*, %dimension_descriptor** %1
  %7 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %6, i32 0
  %8 = getelementptr %dimension_descriptor, %dimension_descriptor* %7, i32 0, i32 0
  %9 = getelementptr %dimension_descriptor, %dimension_descriptor* %7, i32 0, i32 1
  %10 = getelementptr %dimension_descriptor, %dimension_descriptor* %7, i32 0, i32 2
  store i32 1, i32* %8
  store i32 0, i32* %9
  store i32 2, i32* %10
  %11 = alloca i32
  store i32 2, i32* %11
  %12 = getelementptr %array, %array* %y, i32 0, i32 0
  %13 = load i32, i32* %11
  %14 = alloca i16, i32 %13
  store i16* %14, i16** %12
  %yptr1 = alloca %array*
  %yq = alloca void*
  %15 = getelementptr %array, %array* %y, i32 0, i32 2
  %16 = load %dimension_descriptor*, %dimension_descriptor** %15
  %17 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %16, i32 0
  %18 = getelementptr %dimension_descriptor, %dimension_descriptor* %17, i32 0, i32 1
  %19 = load i32, i32* %18
  %20 = sub i32 0, %19
  %21 = mul i32 1, %20
  %22 = add i32 0, %21
  %23 = getelementptr %dimension_descriptor, %dimension_descriptor* %17, i32 0, i32 2
  %24 = load i32, i32* %23
  %25 = mul i32 1, %24
  %26 = getelementptr %array, %array* %y, i32 0, i32 0
  %27 = load i16*, i16** %26
  %28 = getelementptr inbounds i16, i16* %27, i32 %22
  store i16 1, i16* %28
  %29 = getelementptr %array, %array* %y, i32 0, i32 2
  %30 = load %dimension_descriptor*, %dimension_descriptor** %29
  %31 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %30, i32 0
  %32 = getelementptr %dimension_descriptor, %dimension_descriptor* %31, i32 0, i32 1
  %33 = load i32, i32* %32
  %34 = sub i32 1, %33
  %35 = mul i32 1, %34
  %36 = add i32 0, %35
  %37 = getelementptr %dimension_descriptor, %dimension_descriptor* %31, i32 0, i32 2
  %38 = load i32, i32* %37
  %39 = mul i32 1, %38
  %40 = getelementptr %array, %array* %y, i32 0, i32 0
  %41 = load i16*, i16** %40
  %42 = getelementptr inbounds i16, i16* %41, i32 %36
  store i16 2, i16* %42
  store %array* %y, %array** %yptr1
  %43 = getelementptr %array, %array* %y, i32 0, i32 0
  %44 = load i16*, i16** %43
  %45 = ptrtoint i16* %44 to i64
  %46 = load %array*, %array** %yptr1
  %47 = getelementptr %array, %array* %46, i32 0, i32 0
  %48 = load i16*, i16** %47
  %49 = ptrtoint i16* %48 to i64
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @5, i32 0, i32 0), i64 %45, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i32 0, i32 0), i64 %49, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @4, i32 0, i32 0))
  %50 = load %array*, %array** %yptr1
  %51 = getelementptr %array, %array* %50, i32 0, i32 2
  %52 = load %dimension_descriptor*, %dimension_descriptor** %51
  %53 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %52, i32 0
  %54 = getelementptr %dimension_descriptor, %dimension_descriptor* %53, i32 0, i32 1
  %55 = load i32, i32* %54
  %56 = sub i32 0, %55
  %57 = mul i32 1, %56
  %58 = add i32 0, %57
  %59 = getelementptr %dimension_descriptor, %dimension_descriptor* %53, i32 0, i32 2
  %60 = load i32, i32* %59
  %61 = mul i32 1, %60
  %62 = getelementptr %array, %array* %50, i32 0, i32 0
  %63 = load i16*, i16** %62
  %64 = getelementptr inbounds i16, i16* %63, i32 %58
  %65 = load i16, i16* %64
  %66 = load %array*, %array** %yptr1
  %67 = getelementptr %array, %array* %66, i32 0, i32 2
  %68 = load %dimension_descriptor*, %dimension_descriptor** %67
  %69 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %68, i32 0
  %70 = getelementptr %dimension_descriptor, %dimension_descriptor* %69, i32 0, i32 1
  %71 = load i32, i32* %70
  %72 = sub i32 1, %71
  %73 = mul i32 1, %72
  %74 = add i32 0, %73
  %75 = getelementptr %dimension_descriptor, %dimension_descriptor* %69, i32 0, i32 2
  %76 = load i32, i32* %75
  %77 = mul i32 1, %76
  %78 = getelementptr %array, %array* %66, i32 0, i32 0
  %79 = load i16*, i16** %78
  %80 = getelementptr inbounds i16, i16* %79, i32 %74
  %81 = load i16, i16* %80
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @8, i32 0, i32 0), i16 %65, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @6, i32 0, i32 0), i16 %81, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @7, i32 0, i32 0))
  %82 = load %array*, %array** %yptr1
  %83 = getelementptr %array, %array* %82, i32 0, i32 2
  %84 = load %dimension_descriptor*, %dimension_descriptor** %83
  %85 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %84, i32 0
  %86 = getelementptr %dimension_descriptor, %dimension_descriptor* %85, i32 0, i32 1
  %87 = load i32, i32* %86
  %88 = sub i32 0, %87
  %89 = mul i32 1, %88
  %90 = add i32 0, %89
  %91 = getelementptr %dimension_descriptor, %dimension_descriptor* %85, i32 0, i32 2
  %92 = load i32, i32* %91
  %93 = mul i32 1, %92
  %94 = getelementptr %array, %array* %82, i32 0, i32 0
  %95 = load i16*, i16** %94
  %96 = getelementptr inbounds i16, i16* %95, i32 %90
  %97 = load i16, i16* %96
  %98 = sext i16 %97 to i32
  %99 = icmp eq i32 %98, 1
  br i1 %99, label %then, label %else

then:                                             ; preds = %.entry
  br label %ifcont

else:                                             ; preds = %.entry
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @9, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %100 = load %array*, %array** %yptr1
  %101 = getelementptr %array, %array* %100, i32 0, i32 2
  %102 = load %dimension_descriptor*, %dimension_descriptor** %101
  %103 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %102, i32 0
  %104 = getelementptr %dimension_descriptor, %dimension_descriptor* %103, i32 0, i32 1
  %105 = load i32, i32* %104
  %106 = sub i32 1, %105
  %107 = mul i32 1, %106
  %108 = add i32 0, %107
  %109 = getelementptr %dimension_descriptor, %dimension_descriptor* %103, i32 0, i32 2
  %110 = load i32, i32* %109
  %111 = mul i32 1, %110
  %112 = getelementptr %array, %array* %100, i32 0, i32 0
  %113 = load i16*, i16** %112
  %114 = getelementptr inbounds i16, i16* %113, i32 %108
  %115 = load i16, i16* %114
  %116 = sext i16 %115 to i32
  %117 = icmp eq i32 %116, 2
  br i1 %117, label %then1, label %else2

then1:                                            ; preds = %ifcont
  br label %ifcont3

else2:                                            ; preds = %ifcont
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @10, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont3

ifcont3:                                          ; preds = %else2, %then1
  %118 = load void*, void** %yq
  %119 = alloca %array
  %120 = alloca %dimension_descriptor
  %121 = getelementptr %array, %array* %119, i32 0, i32 2
  store %dimension_descriptor* %120, %dimension_descriptor** %121
  %122 = getelementptr %array, %array* %119, i32 0, i32 4
  store i32 1, i32* %122
  store %array* %119, %array** %yptr1
  %123 = getelementptr %array, %array* %119, i32 0, i32 0
  %124 = getelementptr %array, %array* %119, i32 0, i32 2
  %125 = load %dimension_descriptor*, %dimension_descriptor** %124
  %126 = bitcast void* %118 to i16*
  store i16* %126, i16** %123
  %127 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %125, i32 0
  %128 = getelementptr %dimension_descriptor, %dimension_descriptor* %127, i32 0, i32 1
  %129 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %125, i32 0
  %130 = getelementptr %dimension_descriptor, %dimension_descriptor* %129, i32 0, i32 2
  store i32 1, i32* %128
  store i32 1, i32* %130
  %131 = load void*, void** %yq
  %132 = ptrtoint void* %131 to i64
  %133 = load %array*, %array** %yptr1
  %134 = getelementptr %array, %array* %133, i32 0, i32 0
  %135 = load i16*, i16** %134
  %136 = ptrtoint i16* %135 to i64
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @13, i32 0, i32 0), i64 %132, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @11, i32 0, i32 0), i64 %136, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @12, i32 0, i32 0))
  br label %return

return:                                           ; preds = %ifcont3
  ret void
}

declare void @_lfortran_printf(i8*, ...)

declare void @exit(i32)

define i32 @main() {
.entry:
  call void @_lpython_main_program()
  ret i32 0
}
