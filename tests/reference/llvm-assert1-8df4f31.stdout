; ModuleID = 'LFortran'
source_filename = "LFortran"

@0 = private unnamed_addr constant [20 x i8] c"AssertionError: %s\0A\00", align 1
@1 = private unnamed_addr constant [11 x i8] c"a is not 5\00", align 1
@2 = private unnamed_addr constant [16 x i8] c"AssertionError\0A\00", align 1

define void @test_assert() {
.entry:
  %a = alloca i32, align 4
  store i32 5, i32* %a, align 4
  %0 = load i32, i32* %a, align 4
  %1 = icmp eq i32 %0, 5
  br i1 %1, label %then, label %else

then:                                             ; preds = %.entry
  br label %ifcont

else:                                             ; preds = %.entry
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @0, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @1, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %2 = load i32, i32* %a, align 4
  %3 = icmp ne i32 %2, 10
  br i1 %3, label %then1, label %else2

then1:                                            ; preds = %ifcont
  br label %ifcont3

else2:                                            ; preds = %ifcont
  call void (i8*, ...) @_lfortran_printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @2, i32 0, i32 0))
  call void @exit(i32 1)
  br label %ifcont3

ifcont3:                                          ; preds = %else2, %then1
  br label %return

return:                                           ; preds = %ifcont3
  ret void
}

declare void @_lfortran_printf(i8*, ...)

declare void @exit(i32)

define i32 @main() {
.entry:
  ret i32 0
}
