#include <inttypes.h>

#include <stdlib.h>
#include <stdbool.h>
#include <stdio.h>
#include <string.h>
#include <lfortran_intrinsics.h>

#define ASSERT(cond)                                                           \
    {                                                                          \
        if (!(cond)) {                                                         \
            printf("%s%s", "ASSERT failed: ", __FILE__);                       \
            printf("%s%s", "\nfunction ", __func__);                           \
            printf("%s%d%s", "(), line number ", __LINE__, " at \n");          \
            printf("%s%s", #cond, "\n");                                       \
            exit(1);                                                           \
        }                                                                      \
    }
#define ASSERT_MSG(cond, msg)                                                  \
    {                                                                          \
        if (!(cond)) {                                                         \
            printf("%s%s", "ASSERT failed: ", __FILE__);                       \
            printf("%s%s", "\nfunction ", __func__);                           \
            printf("%s%d%s", "(), line number ", __LINE__, " at \n");          \
            printf("%s%s", #cond, "\n");                                       \
            printf("%s", "ERROR MESSAGE:\n");                                  \
            printf("%s%s", msg, "\n");                                         \
            exit(1);                                                           \
        }                                                                      \
    }


struct dimension_descriptor
{
    int32_t lower_bound, length;
};

// Implementations
inline __attribute__((always_inline)) int32_t add(int32_t x, int32_t y)
{
    int32_t _lpython_return_variable;
    _lpython_return_variable = x + y;
    return _lpython_return_variable;
}

inline __attribute__((always_inline)) int32_t and_op(int32_t x, int32_t y)
{
    int32_t _lpython_return_variable;
    _lpython_return_variable = x&y;
    return _lpython_return_variable;
}

void main0()
{
    int32_t x;
    int32_t y;
    int32_t z;
    x = (2 + 3)*5;
    y = add(x, 2)*2;
    ASSERT(x == 25);
    ASSERT(y == 54);
    z = and_op(x, y);
    ASSERT(z == 16);
}

void _lpython_main_program()
{
    main0();
}

int main(int argc, char* argv[])
{
    _lpython_set_argv(argc, argv);
    _lpython_main_program();
    return 0;
}
