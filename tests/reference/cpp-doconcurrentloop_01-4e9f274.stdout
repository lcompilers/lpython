#include <iostream>
#include <string>
#include <vector>
#include <cassert>
#include <cmath>
#include <complex>
#include <Kokkos_Core.hpp>
#include <lfortran_intrinsics.h>

template <typename T>
Kokkos::View<T*> from_std_vector(const std::vector<T> &v)
{
    Kokkos::View<T*> r("r", v.size());
    for (size_t i=0; i < v.size(); i++) {
        r(i) = v[i];
    }
    return r;
}

void _lpython_main_program()
{
    main0();
}

void main0()
{
    Kokkos::View<float[ /* FIXME symbolic dimensions */ ]> a("a");
    Kokkos::View<float[ /* FIXME symbolic dimensions */ ]> b("b");
    Kokkos::View<float[ /* FIXME symbolic dimensions */ ]> c("c");
    int nsize;
    float scalar;
    scalar =   1.00000000000000000e+01;
    nsize = 1234;
    Kokkos::parallel_for(Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(0, nsize - 1+1), KOKKOS_LAMBDA(const long i) {
        a[i - 0] =   5.00000000000000000e+00;
        b[i - 0] =   5.00000000000000000e+00;
    });
    triad(a, b, scalar, c);
    std::cout << "End Stream Triad" << std::endl;
}

void triad(const Kokkos::View<float*> &a, const Kokkos::View<float*> &b, float scalar, const Kokkos::View<float*> &c)
{
    int N;
    N = 1234;
    Kokkos::parallel_for(Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(0, N - 1+1), KOKKOS_LAMBDA(const long i) {
        c[i] = a[i] + scalar*b[i];
    });
}

namespace {

void main2() {
    _lpython_main_program();
}

}
int main(int argc, char* argv[])
{
    Kokkos::initialize(argc, argv);
    main2();
    Kokkos::finalize();
    return 0;
}
