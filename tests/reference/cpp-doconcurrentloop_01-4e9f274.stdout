#include <iostream>
#include <string>
#include <vector>
#include <cassert>
#include <cmath>
#include <complex>
#include <Kokkos_Core.hpp>
#include <lfortran_intrinsics.h>

template <typename T>
Kokkos::View<T*> from_std_vector(const std::vector<T> &v)
{
    Kokkos::View<T*> r("r", v.size());
    for (size_t i=0; i < v.size(); i++) {
        r(i) = v[i];
    }
    return r;
}


struct dimension_descriptor
{
    int32_t lower_bound, length;
};

struct f32_10000_1
{
    Kokkos::View<float*>* data;
    dimension_descriptor dims[1];
    bool is_allocated;

    f32_10000_1(Kokkos::View<float*>* data_): data{data_} {};
};

// Forward declarations
void _lpython_main_program();
void main0();

template <typename T0, typename T1, typename T2>
void triad(T0* a, T1* b, float scalar, T2* c);
namespace {
}

// Implementations

template <typename T0, typename T1, typename T2>
void triad(T0* a, T1* b, float scalar, T2* c)
{
    int32_t N;
    int32_t i;
    N = 1234;
    Kokkos::parallel_for(Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(0, N - 1+1), KOKKOS_LAMBDA(const long i) {
        c->data->operator[](i - c->dims[0].lower_bound) = a->data->operator[](i - a->dims[0].lower_bound) + scalar*b->data->operator[](i - b->dims[0].lower_bound);
    });
}

void main0()
{
    Kokkos::View<float*> a_data("a_data", 10000);
    f32_10000_1 a_value(&a_data);
    f32_10000_1* a = &a_value;
    a->dims[0].lower_bound = 0;
    a->dims[0].length = 10000;
    Kokkos::View<float*> b_data("b_data", 10000);
    f32_10000_1 b_value(&b_data);
    f32_10000_1* b = &b_value;
    b->dims[0].lower_bound = 0;
    b->dims[0].length = 10000;
    Kokkos::View<float*> c_data("c_data", 10000);
    f32_10000_1 c_value(&c_data);
    f32_10000_1* c = &c_value;
    c->dims[0].lower_bound = 0;
    c->dims[0].length = 10000;
    int32_t i;
    int32_t nsize;
    float scalar;
    scalar =   1.00000000000000000e+01;
    nsize = 1234;
    Kokkos::parallel_for(Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(0, nsize - 1+1), KOKKOS_LAMBDA(const long i) {
        a->data->operator[](i - a->dims[0].lower_bound) =   5.00000000000000000e+00;
        b->data->operator[](i - b->dims[0].lower_bound) =   5.00000000000000000e+00;
    });
    triad(a, b, scalar, c);
    std::cout << "End Stream Triad" << std::endl;
}

void _lpython_main_program()
{
    main0();
}

namespace {

void main2() {
    _lpython_main_program();
}

}
int main(int argc, char* argv[])
{
    Kokkos::initialize(argc, argv);
    main2();
    Kokkos::finalize();
    return 0;
}
