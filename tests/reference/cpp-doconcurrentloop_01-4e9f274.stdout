#include <iostream>
#include <string>
#include <vector>
#include <cassert>
#include <cmath>
#include <complex>
#include <Kokkos_Core.hpp>
#include <lfortran_intrinsics.h>

template <typename T>
Kokkos::View<T*> from_std_vector(const std::vector<T> &v)
{
    Kokkos::View<T*> r("r", v.size());
    for (size_t i=0; i < v.size(); i++) {
        r(i) = v[i];
    }
    return r;
}

void _lpython_main_program()
{
    main0();
}

void main0()
{
    Kokkos::View<float[10000]> a("a");
    Kokkos::View<float[10000]> b("b");
    Kokkos::View<float[10000]> c("c");
    int nsize;
    float scalar;
    scalar = 10.000000;
    nsize = 1234;
    Kokkos::parallel_for(Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(0, nsize - 1+1), KOKKOS_LAMBDA(const long i) {
        a[i + 1-1] = 5.000000;
        b[i + 1-1] = 5.000000;
    });
    triad(a, b, scalar, c);
    std::cout << "End Stream Triad" << std::endl;
}

void triad(const Kokkos::View<float*> &a, const Kokkos::View<float*> &b, float scalar, const Kokkos::View<float*> &c)
{
    int N;
    N = 1234;
    Kokkos::parallel_for(Kokkos::RangePolicy<Kokkos::DefaultExecutionSpace>(0, N - 1+1), KOKKOS_LAMBDA(const long i) {
        c[i + 1-1] = a[i + 1-1] + scalar*b[i + 1-1];
    });
}

namespace {

void main2() {
        _lpython_main_program();
}

}
int main(int argc, char* argv[])
{
    Kokkos::initialize(argc, argv);
    main2();
    Kokkos::finalize();
    return 0;
}
